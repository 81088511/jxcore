{
  "source": "doc/api/jxcore-features-package.markdown",
  "modules": [
    {
      "textRaw": "Package Manager",
      "name": "package_manager",
      "desc": "<p>JXcore introduces a unique feature for packaging and encryption of source files and other assets into <code>JX</code> packages.\n\n</p>\n<p>Letâ€™s assume you have a large project consisting of many files. This feature packs them all into a single file to simplify the distribution. It also protects your server side javascript code by encrypting all source files.\n\n</p>\n<p><code>JX</code> packages can be easily executed with JXcore, just like normal JavaScript application:\n\n</p>\n<pre><code>jx helloworld.jx</code></pre>\n<p>instead of:\n\n</p>\n<pre><code>jx helloworld.js</code></pre>\n",
      "modules": [
        {
          "textRaw": "Command",
          "name": "command",
          "modules": [
            {
              "textRaw": "package",
              "name": "package",
              "desc": "<pre><code>jx package javascript_file name_of_the_package [-slim folder, folder2, ...]</code></pre>\n<p>This command recursively scans the current folder and generates a <code>JXP</code> package information file based on all the files in that directory.\nAfter that compiles the <code>JXP</code> file (by invoking <code>compile</code> command).\n\n</p>\n<ul>\n<li><code>javascript_file</code> - this is the main file, which will be executed when jx package will be launched with <code>jx name_of_the_package.jx</code> command.</li>\n<li><code>name_of_the_package</code> - this indicates the name of the package file. For example, giving the value <em>MyPackage</em> or will create <em>mypackage.jx</em> file.</li>\n<li><code>-slim</code> - this optional parameters followed by folder names separated with comma, prevents adding those folders into the final <code>JX</code> package.</li>\n</ul>\n<p>Suppose you have a simple <em>Hello_World</em> project, with just two files: <em>helloworld.js</em> and <em>index.html</em>. When you call:\n\n</p>\n<pre><code>jx package helloworld.js &quot;Hello World&quot;</code></pre>\n<p>initially, the tool generates <code>JXP</code> project file (<em>helloworld.jxp</em>). Then it creates the output package <em>helloworld.jx</em> by using the project file.\n\n</p>\n",
              "type": "module",
              "displayName": "package"
            }
          ],
          "type": "module",
          "displayName": "Command"
        }
      ],
      "type": "module",
      "displayName": "Package Manager"
    }
  ]
}
