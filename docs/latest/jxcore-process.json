{
  "source": "doc/api/jxcore-process.markdown",
  "modules": [
    {
      "textRaw": "Subthreads API",
      "name": "subthreads_api",
      "desc": "<p>Subthreads API is a collection of JXcore methods and properties for accessing from inside a subthread.\n\n</p>\n<p>All of the methods described here are accessible from global <code>process</code> object, for example:\n\n</p>\n<pre><code>process.keepAlive();</code></pre>\n",
      "modules": [
        {
          "textRaw": "Events",
          "name": "events",
          "events": [
            {
              "textRaw": "Event: 'restart'",
              "type": "event",
              "name": "restart",
              "desc": "<p>Attaching any callback to this event inside a code running multithreaded enables internal thread recovery. So when an exception occurs inside the subthread, and callback is attached to this event, it is invoked and inside of this callback you may decide if to allow restart of the thread or not.\nAlso this is a good opportunity to save some data used by this thread, because after it will crash, normally they would be lost.\n\n</p>\n<p>Callback for this event receives one parameter:\n\n</p>\n<ul>\n<li><code>restart_callback</code> - this is a function, which should be invoked if you want to allow for thread recovery. If you will not call it, the thread will die but not restart.\nAny tasks, that you want to perform, like saving some thread&#39;s data (objects, variables etc) into database or even shared memory store, must be done before calling <code>restart_callback()</code>.</li>\n</ul>\n<p>In the example below we are throwing an exception, which causes <code>restart</code> event to be fired. Also we are counting how many times thread was restarted, and based on that we decide if to allow for another restart or not.\n\n</p>\n<p>The code should be run with mt-keep parameter:\n\n</p>\n<pre><code>jx mt-keep sample.js</code></pre>\n<p>sample.js:\n\n</p>\n<pre><code>var shared = jxcore.store.shared;\nvar sid = &quot;threadRestartCount_&quot; + process.threadId;\n\nvar counter = 0;\n\n// this is just for storing thread&#39;s restart counter.\n// we use jxcore.store.shared here, because it is static (unrelated to the threads)\nif (shared.exists(sid)) {\n    counter = parseInt(shared.get(sid)) + 1;\n    console.log(&quot;Thread no %s restarted %d times.&quot;, process.threadId, counter);\n}\nshared.set(sid, counter);\n\n// attaching callback to this event enables the thread recovery,\n// but still you need to call restart_callback() explicitly to make a restart\nprocess.on(&#39;restart&#39;, function (restart_callback) {\n    if (counter &lt; 3) {\n        // we don&#39;t want to allow for infinitive restarts. 3 is enough.\n        console.log(&quot;Restarting thread no &quot; + process.threadId);\n        restart_callback();\n    } else {\n        console.log(&quot;Thread no %s was restarted %d times. We&#39;ll not restart any more.&quot;,\n            process.threadId, counter);\n        // releasing the thread allows main process to exit,\n        // when all the threads are released.\n        process.release();\n    }\n});\n\n// this loop is used to throw an exception inside a subthread\nsetTimeout(function () {\n    throw &quot;Let&#39;s restart the thread!&quot;;\n}, 100 * counter * process.threadId);</code></pre>\n<p>Please note, that when any listener is attached with <code>process.on(&quot;uncaughtException&quot;)</code>, the thread recovery is not active, because it makes sense only for uncaught exceptions, which in this case are actually caught by <code>uncaughtException</code> event.\n\n</p>\n",
              "params": []
            }
          ],
          "type": "module",
          "displayName": "Events"
        }
      ],
      "methods": [
        {
          "textRaw": "process.keepAlive(timeout)",
          "type": "method",
          "name": "keepAlive",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`timeout` {Number} ",
                  "name": "timeout",
                  "type": "Number"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "timeout"
                }
              ]
            }
          ],
          "desc": "<p>Marks the current task (from which the method was called) to be alive. This will inform the thread pool, that the task has an intention to continue working (probably by doing some delayed or async work).\n\n</p>\n<p>Normally the thread pool knows, that the task is working only until it returns from the task method. But if you would use in the task code e.g. delayed execution with <code>setTimeout()</code> or <code>setInterval()</code>, or any async call, the task method may return faster, before those delayed/async jobs will have chance to complete. This is a moment, when <code>process.keepAlive()</code> comes in handy. Later in the code, you can call <code>process.release()</code> to signal the main thread, that the task has completed.\n\n</p>\n<p>The <code>timeout</code> parameter specifies, how many milliseconds the task should be kept alive, before automatic release will happen. This parameter is optional, and if you don’t provide it, task will be alive forever, or until <code>process.release()</code> will be called.\n\n</p>\n<pre><code>var method = function (obj) {\n\n    setTimeout(function () {\n       console.log(&quot;I&#39;m here after 2000 ms. Can close now&quot;);\n       process.release();\n    }, 2000);\n\n    console.log(&quot;waiting for 2000 ms&quot;);\n\n    // without the line below, current task would return immediately\n    // and the method delayed with setTimeout() would not have chance to complete.\n    // try to comment the line below to test the behaviour, and you will see,\n    // that the application closes itself, since the task is not kept alive.\n    process.keepAlive();\n};\n\njxcore.tasks.addTask(method);</code></pre>\n"
        },
        {
          "textRaw": "process.release()",
          "type": "method",
          "name": "release",
          "desc": "<p>Unmarks the current task (from which the method was called) from being alive. You can use this method to inform the thread pool, that the task finished its work. If you will do this for all of the tasks, the main thread could freely exit then, and the application may close itself naturally with exit code = 0.\n\n</p>\n<p>Please refer to <code>process.keepAlive()</code> method for full example.\n\n</p>\n<pre><code>process.release();</code></pre>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "process.sendToMain(param)",
          "type": "method",
          "name": "sendToMain",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`param` {Object} ",
                  "name": "param",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "param"
                }
              ]
            }
          ],
          "desc": "<p>Sends a message to the main thread, and there it can be received by attaching to <a href=\"#tasks_event_message\"><code>message</code></a> event. The <code>param</code> can be any value, for example string or json literal object.\n\n</p>\n<pre><code>process.sendToMain( { obj: &quot;something&quot; } );\n\n// now the main thread can receive the message like this:\njxcore.tasks.on(&#39;message&#39;, function (threadId, param) {\n   console.log(&#39;Main thread received a message from subthread no &#39; + threadId +\n      &#39;. Message: &#39;, param);\n});</code></pre>\n"
        },
        {
          "textRaw": "process.unloadThread()",
          "type": "method",
          "name": "unloadThread",
          "desc": "<p>Marks the subthread to be removed from the thread pool and eventually removes it. The removal itself will happen as soon as the subthread finishes execution of its latest task.\n\n</p>\n<p>You may want to use this method to release subthread’s resources, if you don’t plan to use it soon. Adding any tasks later will create a fresh subthread automatically on demand.\n</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "properties": [
        {
          "textRaw": "process.subthread",
          "name": "subthread",
          "desc": "<p>This property returns <code>true</code>, if the current code block runs under the subthread, or <code>false</code> otherwise.\n\n</p>\n<pre><code>if (process.subThread) {\n   console.log(&quot;we are in a subthread.&quot;);\n}</code></pre>\n"
        },
        {
          "textRaw": "process.threadId",
          "name": "threadId",
          "desc": "<p>Returns the ID of the subthread. It is a number between 0 and 62 (because the maximum amount of subthreads is 63).\nYou can also control the number of subthreads for your application, see here for more information: <a href=\"\">Defaults</a>.\n\n</p>\n<p>Since one of the subthreads can have its index equal to 0, we should not test it with:\n\n</p>\n<pre><code>if (process.threadId) {\n    // do something\n}</code></pre>\n"
        }
      ],
      "type": "module",
      "displayName": "Subthreads API"
    }
  ]
}
