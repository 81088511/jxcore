{
  "source": "doc/api/jxcore-3rd-party-js-bson.markdown",
  "modules": [
    {
      "textRaw": "Javascript + C++ BSON parser",
      "name": "javascript_+_c++_bson_parser",
      "modules": [
        {
          "textRaw": "Credits",
          "name": "Credits",
          "desc": "<p>No installation is needed, since this module is embedded inside JXcore.\n\n</p>\n",
          "type": "module",
          "displayName": "Installation"
        },
        {
          "textRaw": "Installation",
          "name": "installation",
          "desc": "<p>No installation is needed, since this module is embedded inside JXcore.\n\n</p>\n",
          "type": "module",
          "displayName": "Installation"
        },
        {
          "textRaw": "Description",
          "name": "description",
          "desc": "<p>This BSON parser is primarily meant for usage with the <code>mongodb</code> JXcore driver. However thanks to such wonderful tools at <code>onejs</code> we are able to package up a BSON parser that will work in the browser aswell. The current build is located in the <code>browser_build/bson.js</code> file.\n\n</p>\n<p>A simple example on how to use it\n\n</p>\n<pre><code>&lt;head&gt;\n  &lt;script src=&quot;https://raw.github.com/mongodb/js-bson/master/browser_build/bson.js&quot;&gt;\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=&quot;start();&quot;&gt;\n&lt;script&gt;\n  function start() {\n    var BSON = bson().BSON;\n    var Long = bson().Long;\n\n    var doc = {long: Long.fromNumber(100)}\n\n    // Serialize a document\n    var data = BSON.serialize(doc, false, true, false);\n    // De serialize it again\n    var doc_2 = BSON.deserialize(data);\n  }\n&lt;/script&gt;\n&lt;/body&gt;</code></pre>\n<p>It&#39;s got two simple methods to use in your application.\n\n</p>\n<ul>\n<li><p>BSON.serialize(object, checkKeys, asBuffer, serializeFunctions)</p>\n<ul>\n<li>@param {Object} object the Javascript object to serialize.</li>\n<li>@param {Boolean} checkKeys the serializer will check if keys are valid.</li>\n<li>@param {Boolean} asBuffer return the serialized object as a Buffer object <strong>(ignore)</strong>.</li>\n<li>@param {Boolean} serializeFunctions serialize the javascript functions <strong>(default:false)</strong></li>\n<li>@return {TypedArray/Array} returns a TypedArray or Array depending on what your browser supports</li>\n</ul>\n</li>\n<li><p>BSON.deserialize(buffer, options, isArray)</p>\n<ul>\n<li>Options<ul>\n<li><strong>evalFunctions</strong> {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.</li>\n<li><strong>cacheFunctions</strong> {Boolean, default:false}, cache evaluated functions for reuse.</li>\n<li><strong>cacheFunctionsCrc32</strong> {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.</li>\n</ul>\n</li>\n<li>@param {TypedArray/Array} a TypedArray/Array containing the BSON data</li>\n<li>@param {Object} [options] additional options used for the deserialization.</li>\n<li>@param {Boolean} [isArray] ignore used for recursive parsing.</li>\n<li>@return {Object} returns the deserialized Javascript Object.</li>\n</ul>\n</li>\n</ul>\n",
          "type": "module",
          "displayName": "Description"
        }
      ],
      "type": "module",
      "displayName": "Javascript + C++ BSON parser"
    }
  ]
}
